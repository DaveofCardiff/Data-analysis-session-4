# -*- coding: utf-8 -*-
"""Python Session 4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/127GyOpJd0RT3kKY97w9AyZISldeeahOT
"""

import pandas as pd

police = pd.read_csv("police.csv")

police.info()

police_dates = pd.read_csv("police.csv", parse_dates=(["stop_date"]))
police_dates.info()

police

newdf = police[police['driver_age_raw'] != 2919]
newdf = newdf[newdf['driver_age_raw'] != 8801]

police['driver_race'].unique()

police['driver_race'].value_counts()

police['driver_age'].unique()

police[police['driver_age'] == 84]

newdf

start_date = '2005-01-01'
end_date = '2006-01-31'


#Now let's filter out and apply our dates

filtered_dates = (police['stop_date'] >= start_date) & (police['stop_date'] <= end_date)
filtered_dates_final = police.loc[filtered_dates]


filtered_dates_final

average_driver = filtered_dates_final.groupby(['driver_race'])['driver_age'].mean().reset_index()
average_driver

police.info()

police['stop_date'] = pd.to_datetime(police['stop_date'], format='%Y-%m-%d')

police.info()

police['Month'] = police['stop_date'].dt.month
police['Year'] = police['stop_date'].dt.year
police['Day'] = police['stop_date'].dt.weekday

Months = {1:'Jan',2:'Feb',3:'Mar', 4:'Apr', 5:'May', 6:'Jun', 7:'Jul', 8:'Aug', 9:'Sep', 10:'Oct', 11:'Nov', 12:'Dec'}
Weekday = {0:"Mon", 1:"Tue", 2:"Wed", 3:"Thu", 4:"Fri", 5:"Sat", 6:"Sun"}

police['Day'].replace(Weekday, inplace=True)
police['Month'].replace(Months, inplace=True)

police

"""TASK - You now have a task to complete that involves several steps.
The aim of this task is for you to put into practice some of the skills that we have learnt and for you to try and solve some problems.
Feel free to refer back to previous sessions, research, help each other and ask questions.
First off we need to start by bringing in the airbnb.csv file and you need to ensure that you are parsing host_since as a date’s column.
Once that has done we will then incorporate some Exploratory Data Analysis and cleansing from today’s session and from previous sessions.
Start by completing the following:
1.	Find out the info about the data.
2.	View the top 5 rows of the data
3.	Check for how many null items are in each column - if any then remove them.
4.	Check for any duplicates - if any then remove them.
5.	You then need to remove the value - SF from the city column.
6.	Find out the unique values from city to check the above has worked.
7.	Rename the following columns (you can do it as one or separately). – cleaning_fee (cleaning_price), room_type(type_of_room) & zipcode(postcode)
8.	Drop the columns amenities and host_identity_verified
9.	You need to replace strict & flexible from the cancellation_policy Column with really_strict & really_flexible.
10.	You then need to complete a value count of how many categories in cancellation_policy
11.	You then need to find all of the Airbnb’s that accommodate over 10
12.	You then need to find all of the Airbnb’s that have over 50 reviews
13.	Now create a day, month and year column from the host_since column.
14.	Sort the data by city.
15.	Save this updated file.

Next:
Create 3 groupby following the correct specification:
1.	Average Price & Average Number of Reviews per city - with the index reset and the data rounded to 1 decimal place.
2.	Lowest Price per neighbourhood with the index reset.
3.	Highest price per accommodates - index reset - data rounded to 1 decimal place & then sorted by accommodates (ascending False)
4.	Finally - Save the 3 groupby - Feel free to add any other functions along the way.




"""



airbnb = pd.read_csv("airbnb.csv", parse_dates=['host_since'])

airbnb.info()

airbnb.isnull().sum()

airbnb.dropna(subset=['host_response_rate', 'neighbourhood', 'review_scores_rating'], inplace=True)
airbnb.isnull().sum()

airbnb.duplicated().sum()

airbnb = airbnb[airbnb['city'] != 'SF']

airbnb['city'].unique()

airbnb.rename(columns={'cleaning_fee': 'cleaning_price', 'room_type': 'type_of_room', 'zipcode': 'post_code'}, inplace = True)
airbnb.info()

airbnb.drop(columns=['amenities', 'host_identity_verified'], inplace=True)
airbnb

airbnb['cancellation_policy'] = airbnb['cancellation_policy'].replace(['strict', 'flexible'], ['really_strict', 'really_flexible'])

airbnb['cancellation_policy'].value_counts()

airbnb['city'].unique()

#find all of the airbnbs that accomodate over over 10
airbnb[airbnb['accommodates']>10]

#find all of the airbnbs that have over 50 reviews

airbnb[airbnb['number_of_reviews']>50]

airbnb['Month'] = airbnb['host_since'].dt.month
airbnb['Year'] = airbnb['host_since'].dt.year
airbnb['Day'] = airbnb['host_since'].dt.weekday

airbnb

airbnb.sort_values(['city'], ascending = False, inplace=True)
airbnb

avg_price = airbnb.groupby(['city'])[['price', 'number_of_reviews']].mean().reset_index().round()
avg_price

min_price = airbnb.groupby(['neighbourhood'])['price'].min().reset_index()
min_price

max_price = airbnb.groupby(['accommodates'])['price'].max().reset_index()
max_price.sort_values(['accommodates'], ascending=False, inplace=True)
max_price